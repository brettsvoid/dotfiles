# Enable Powerlevel10k instant prompt. Should stay close to the top of
# ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    aws
    brew
    chezmoi
    git 
    python
    zsh-autosuggestions
    zsh-syntax-highlighting 
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# -------------------------
# CUSTOM STUFF FROM HERE
# -------------------------
[ -f ~/.env_vars ] && source ~/.env_vars

alias cat="bat"
alias find="fd"
# alias grep="rg" 
# alias ps="procs"
alias vim="nvim"


# Use lsd as default (https://webinstall.dev/lsd/)
alias ls="lsd -F"
alias la="lsd -AF"
alias ll="lsd -lAF"
alias lg="lsd -F --group-dirs=first"
alias tree="lsd -AF --tree"

alias commitrefine='python ~/projects/github.com/brettsvoid/commit-refine/main.py'

# Fix tabbing trying to autoselect options
setopt noautomenu

code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;}

# Load Git completion
# Not sure if this is needed anymore because of omz git plugin
#zstyle ':completion:*:*:git:*' script ~/.zsh/git-completion.bash
#fpath=(~/.zsh $fpath)
#autoload -Uz compinit && compinit

# Set code editor for jumping into editor from stack traces
export REACT_EDITOR=nvim

# sketchybar
# This will update the brew package count after running a brew upgrade, brew
# update or brew outdated command
if command -v sketchybar &>/dev/null; then
    # Define a custom 'brew' function to wrap the Homebrew command.
    function brew() {
      # Execute the original Homebrew command with all passed arguments.
      command brew "$@"
      # Check if the command includes "upgrade", "update", or "outdated".
      if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]] || [[ $* =~ "list" ]] || [[ $* =~ "install" ]] || [[ $* =~ "uninstall" ]] || [[ $* =~ "bundle" ]] || [[ $* =~ "doctor" ]] || [[ $* =~ "info" ]] || [[ $* =~ "cleanup" ]]; then
	# If so, notify SketchyBar to trigger a custom action.
	sketchybar --trigger brew_update
      fi
    }
fi

# -------------------------
# PATH mutations
# -------------------------
# Function to append a directory to PATH if it's not already included
function append_to_path() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$PATH:$1"
    fi
}

# Function to prepend a directory to PATH if it's not already included
function prepend_to_path() {
    if [[ ":$PATH:" != *":$1:"* ]]; then
        export PATH="$1:$PATH"
    fi
}

# export VOLTA_HOME="$HOME/.volta"
# prepend_to_path "$VOLTA_HOME/bin"


#export PATH="/opt/homebrew/bin:$PATH"
prepend_to_path "/opt/homebrew/bin"

# Added by Amplify CLI binary installer
prepend_to_path "$HOME/.amplify/bin"

prepend_to_path "$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin"

# Add `go` binaries to path
append_to_path "$HOME/go/bin"

# Add docker cli
append_to_path "$HOME/.docker/bin"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
   if [ -f "/opt/homebrew/anaconda3/etc/profile.d/conda.sh" ]; then
       . "/opt/homebrew/anaconda3/etc/profile.d/conda.sh"
   else
       export PATH="/opt/homebrew/anaconda3/bin:$PATH"
   fi
fi
unset __conda_setup
# <<< conda initialize <<<

prepend_to_path "$(brew --prefix ruby)/bin"

# Add rustup
append_to_path "$(brew --prefix rustup)/bin"

prepend_to_path "/opt/homebrew/opt/ccache/libexec"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Call 'nvm use' automatically in a directory with a .nvmrc file
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Path mutation needed for lunarvim
prepend_to_path "$HOME/.local/bin"

alias lvim='nvim-lunarvim' # LunarVim



# Meld merge tool
# alias meld="open -W -a Meld $@"

# Set up fzf to read terminal history
source <(fzf --zsh)

HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt appendhistory

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"


# Yazi wrapper to allow changing working directory when exiting yazi
# https://yazi-rs.github.io/docs/quick-start
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Java
export PATH="/opt/homebrew/opt/openjdk@17/bin:$PATH"

# Android dev
export ANDROID_HOME=$HOME/Library/Android/sdk
append_to_path "$ANDROID_HOME/emulator"
append_to_path "$ANDROID_HOME/tools"
append_to_path "$ANDROID_HOME/tools/bin"
append_to_path "$ANDROID_HOME/platform-tools"

# pnpm
export PNPM_HOME="/Users/brett/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) prepend_to_path $PNPM_HOME ;;
esac
# pnpm end


alias download_website='wget --mirror -p --convert-links --no-parent'

# VPN aliases
alias vpn-start="aws ec2 start-instances --profile algo-vpn --region ap-northeast-1 --instance-ids i-073d4b357cf703898"
alias vpn-stop="aws ec2 stop-instances --profile algo-vpn --region ap-northeast-1 --instance-ids i-073d4b357cf703898"
alias vpn-status="aws ec2 describe-instances --profile algo-vpn --region ap-northeast-1 | jq '.Reservations[0].Instances[0].State'"

# Factorio server aliases
alias factorio-start="aws ec2 start-instances --profile factorio --region eu-west-1 --instance-ids i-026aeca5f45cfd94c"
alias factorio-stop="aws ec2 stop-instances --profile factorio --region eu-west-1 --instance-ids i-026aeca5f45cfd94c"
alias factorio-status="aws ec2 describe-instances --profile factorio --region eu-west-1 | jq '.Reservations[0].Instances[0].State'"

# Use neovim for vimdiff
alias vimdiff='nvim -d'

# Initialise zoxide
eval "$(zoxide init zsh)"


