# Create a hyper mode that is bound to F18. A key like capslock can be rebound 
# to F18.
:: default : yabai -m config active_window_border_color 0xff775759
:: hyper_mode @ : yabai -m config active_window_border_color 0xff24ccaa && terminal-notifier -title "Hyper Mode" -message "Entering hyper mode"

# from 'default' mode, activate mode 'hyper'
f18 ; hyper_mode

# Escape can be used to exit hyper mode. Use `; skhd -k "escape"` at the end of
# all commands to escape hyper mode.
hyper_mode < escape ; default

# Change Window Focus

# # change window focus within space
# alt - j: yabai -m window --focus south
# alt - k: yabai -m window --focus north
# alt - h: yabai -m window --focus west
# alt - l: yabai -m window --focus east
#
# # change focus between external displays (left and right)
# alt - s: yabai -m display --focus west
# alt - g: yabai -m display --focus east
#
# # Modifying the Layout
#
# # rotate layout clockwise
# shift + alt - r: yabai -m space --rotate 270
#
# # flip along y-axis
# shift + alt - y: yabai -m space --mirror y-axis

# # flip along x-axis
# shift + alt - x: yabai -m space --mirror x-axis

# toggle window float
hyper_mode < t: yabai -m window --toggle float --grid 4:4:1:1:2:2 ; skhd -k "escape"

# # Modifying Window Size

# # maximize a window
# shift + alt - m: yabai -m window --toggle zoom-fullscreen

# # balance out tree of windows (resize to occupy same area)
# shift + alt - e: yabai -m space --balance

# # Moving Windows Around

# # swap windows
# shift + alt - j: yabai -m window --swap south
# shift + alt - k: yabai -m window --swap north
# shift + alt - h: yabai -m window --swap west
# shift + alt - l: yabai -m window --swap east

# # move window and split
# ctrl + alt - j: yabai -m window --warp south
# ctrl + alt - k: yabai -m window --warp north
# ctrl + alt - h: yabai -m window --warp west
# ctrl + alt - l: yabai -m window --warp east

# # move window to display left and right
# shift + alt - s: yabai -m window --display west; yabai -m display --focus west;
# shift + alt - g: yabai -m window --display east; yabai -m display --focus east;

# # move window to prev and next space
# shift + alt - p: yabai -m window --space prev
# shift + alt - n: yabai -m window --space next

# # move window to space
# shift + alt - 1: yabai -m window --space 1
# shift + alt - 2: yabai -m window --space 2
# shift + alt - 3: yabai -m window --space 3
# shift + alt - 4: yabai -m window --space 4
# shift + alt - 5: yabai -m window --space 5
# shift + alt - 6: yabai -m window --space 6
# shift + alt - 7: yabai -m window --space 7
# shift + alt - 8: yabai -m window --space 8
# shift + alt - 9: yabai -m window --space 9

# Start/Stop Yabai
hyper_mode < cmd + alt - q: yabai --stop-service ; terminal-notifier -title skhd -message "Stopping Yabai" ; skhd -k "escape"
hyper_mode < cmd + alt - s: yabai --start-service ; terminal-notifier -title skhd -message "Starting Yabai" ; skhd -k "escape"
hyper_mode < cmd + alt - r: yabai --restart-service ; terminal-notifier -title skhd -message "Restarting Yabai" ; skhd -k "escape"

# Example command to send a notification and test keys
# terminal-notifier -title skhd -message "Restarting Yabai"
# hyper_mode < a : terminal-notifier -title "Test F18" -message "F18 key was pressed" ; skhd -k "escape"

ctrl - 1 : open -a "kitty"
ctrl - 2 : open -a "Google Chrome"
ctrl - 9 : open -a "Finder"
ctrl - 0 : open -a "Spotify"

ctrl + shift - 1 : osascript -e 'tell application "kitty" to quit'
ctrl + shift - 2 : osascript -e 'tell application "Google Chrome" to quit'
ctrl + shift - 9 : osascript -e 'tell application "Finder" to close every window'
ctrl + shift - 0 : osascript -e 'tell application "Spotify" to quit'


# :: default : say 'default'
# :: app @ : say 'app'
#
# # Open apps
# # ctrl + alt - a :: f: open -a Forklift.app
#
# ctrl + shift + alt - a ; app
# app < ctrl + shift + alt - x ; default

#alt - q : open -a "/System/Applications/QuickTime Player.app/Contents/MacOS/QuickTime Player"

# add an on_enter command to the default mode
#:: default : say "default"

# defines a new mode 'test' with an on_enter command, that captures keypresses
#:: test @ : say "test"

# from 'default' mode, activate mode 'test'
#ctrl - x ; test

# from 'test' mode, activate mode 'default'
#test < ctrl - x ; default

# alt - n [
#      "kitty"       : echo "hello kitty"
#      *             : say "hello everyone"
#      "finder"      : say "howdy"
# ]
